# ================================
# DATABASE CONFIGURATION (H2)
# ================================

# H2 in-memory database URL (data is not persisted after shutdown)
spring.datasource.url=jdbc:h2:mem:testdb

# H2 JDBC driver
spring.datasource.driverClassName=org.h2.Driver

# Default username for H2
spring.datasource.username=sa

# No password needed for in-memory H2
spring.datasource.password=

# Hibernate dialect for H2 database
spring.jpa.database-platform=org.hibernate.dialect.H2Dialect

# Enable H2 web console for debugging (accessible at /h2-console)
spring.h2.console.enabled=true

# Show SQL queries in the console/log (good for development)
spring.jpa.show-sql=true


# ================================
# HIBERNATE BATCHING CONFIGURATION
# ================================

# Number of records to group together in a single batch for insert/update
spring.jpa.properties.hibernate.jdbc.batch_size=30

# Optimize insert order for better batch performance
spring.jpa.properties.hibernate.order_inserts=true

# Optimize update order for better batch performance
spring.jpa.properties.hibernate.order_updates=true

#ðŸ—‚ Hibernate Batching Configuration Breakdown
#âœ… spring.jpa.properties.hibernate.jdbc.batch_size=30
#Groups 30 insert/update statements into a single batch.
#Improves performance by reducing the number of round-trips to the database.
#Especially helpful when saving many entities in a loop or bulk operation.
#âœ… spring.jpa.properties.hibernate.order_inserts=true
#Hibernate reorders insert statements by entity type to maximize batching.
#Ensures similar entities are grouped together, allowing the batch size to be utilized fully.
#âœ… spring.jpa.properties.hibernate.order_updates=true
#Reorders updates by entity type, just like inserts.
#Useful when updating many entities of the same type, improving efficiency.
